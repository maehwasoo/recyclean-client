name: Fork to personal & Deploy to Vercel (main only)

on:
  push:
    branches: [main]   # 오직 main 브랜치 푸시에만 실행

# 동시 실행 방지(새 커밋 푸시 시 이전 실행 취소)
concurrency:
  group: vercel-prod-${{ github.ref }}
  cancel-in-progress: true   # 최신 커밋만 배포 유지 (권장) :contentReference[oaicite:11]{index=11}

permissions:
  contents: read

env:
  # 개인 깃허브 사용자명으로 교체
  FORK_OWNER: your-github-username
  DEFAULT_BRANCH: main
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  fork_and_deploy:
    if: github.ref == 'refs/heads/main'   # 안전장치(메인만)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout upstream (org) repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # (1) 개인 포크 보장: 없으면 생성(비동기라 폴링)
      - name: Ensure fork exists (create if missing)
        env:
          GH_PAT: ${{ secrets.FORK_PAT }}
          OWNER: ${{ github.repository_owner }}             # HongikCE-RecyClean
          REPO: ${{ github.event.repository.name }}         # recyclean-client
        run: |
          set -e
          api="https://api.github.com"

          # 포크 존재 여부
          code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $GH_PAT" \
            -H "Accept: application/vnd.github+json" \
            "$api/repos/${FORK_OWNER}/${REPO}")

          if [ "$code" != "200" ]; then
            echo "Creating fork to ${FORK_OWNER}/${REPO}..."
            curl -s -L -X POST \
              -H "Authorization: Bearer $GH_PAT" \
              -H "Accept: application/vnd.github+json" \
              "$api/repos/${OWNER}/${REPO}/forks" \
              -d '{}' >/dev/null

            echo "Waiting for fork to be ready..."
            for i in {1..30}; do
              sleep 2
              code=$(curl -s -o /dev/null -w "%{http_code}" \
                -H "Authorization: Bearer $GH_PAT" \
                -H "Accept: application/vnd.github+json" \
                "$api/repos/${FORK_OWNER}/${REPO}")
              [ "$code" = "200" ] && break
            done
          else
            echo "Fork already exists: ${FORK_OWNER}/${REPO}"
          fi
        # Create a fork API / 비동기 동작 근거: 공식 REST 문서 및 공지 참조
        # :contentReference[oaicite:12]{index=12}

      # (2) 포크 최신화(업스트림 → 포크의 main)
      - name: Sync fork with upstream (merge-upstream)
        env:
          GH_PAT: ${{ secrets.FORK_PAT }}
          REPO: ${{ github.event.repository.name }}
        run: |
          set -e
          echo "Syncing ${FORK_OWNER}/${REPO}:${DEFAULT_BRANCH} with upstream..."
          curl -s -L -X POST \
            -H "Authorization: Bearer $GH_PAT" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${FORK_OWNER}/${REPO}/merge-upstream" \
            -d "{\"branch\":\"${DEFAULT_BRANCH}\"}" || true
        # merge-upstream API: 포크를 업스트림과 동기화
        # :contentReference[oaicite:13]{index=13}

      # (3) 포크 기준으로 빌드/배포
      - name: Clone fork
        run: git clone https://github.com/${FORK_OWNER}/${{ github.event.repository.name }}.git fork

      - name: Setup Node (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure PNPM (repo has pnpm-lock.yaml)
        run: npm i -g pnpm

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Pull Vercel Env (production)
        working-directory: fork
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        # vercel pull은 로컬/CI의 build를 위한 환경/설정 캐시용 (build/dev 시 필요) :contentReference[oaicite:14]{index=14}

      - name: Build (production)
        working-directory: fork
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        # 로컬/CI에서 빌드 산출물을 생성(.vercel/output) :contentReference[oaicite:15]{index=15}

      - name: Deploy to Vercel (production)
        id: deploy
        working-directory: fork
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
        # 미리 빌드된 산출물을 업로드하여 배포 :contentReference[oaicite:16]{index=16}

      - name: Deployment URL
        run: echo "Deployed: ${{ steps.deploy.outputs.url }}"
